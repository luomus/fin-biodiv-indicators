kind: Template
apiVersion: template.openshift.io/v1
parameters:
  - name: BRANCH
    required: true
  - name: APP
    required: true
    value: fin-biodiv-indicators
  - name: PAGE_TITLE
    required: true
    value: "Finnish Biodiversity Indicators"
  - name: APP_PORT
    required: true
    value: "8000"
  - name: HOME
    required: true
    value: /home/user
  - name: HEALTH
    required: true
    value: healthz
  - name: LIVENESS_PERIOD
    required: true
    value: "1800"
  - name: FAILURE_THRESHOLD
    required: true
    value: "5"
  - name: READINESS_PERIOD
    required: true
    value: "5"
  - name: TMP_DIR
    required: true
    value: tmp
  - name: VAR
    required: true
    value: var
  - name: SHINY_PORT
    required: true
    value: "3838"
  - name: DB
    required: true
    value: postgres
  - name: DB_HEALTHCHECK
    required: true
    value: '[
      "sh",
      "-c",
      "PGPASSWORD=$PG_PASSWORD
        psql -h 0.0.0.0 -U $PG_USER -d $PG_DATABASE -c \"SELECT 1\""
    ]'
  - name: DB_IMAGE
    required: true
    value: crunchydata/crunchy-postgres:centos8-13.6-4.7.5
  - name: DB_PORT
    required: true
    value: "5432"
  - name: DB_DIR
    required: true
    value: /pgdata
  - name: DB_MODE
    required: true
    value: primary
  - name: CONF
    required: true
    value: config
  - name: JOB_CMD
    required: true
    value: '["Rscript", "--vanilla", "update_indices.R"]'
  - name: JOB_SCHEDULE
    required: true
    value: "0 22 * * *"
  - name: JOB_LIMIT
    required: true
    value: "7"
  - name: JOB_CONCURRENCY
    required: true
    value: "Forbid"
  - name: GIT_HOST
    required: true
    value: https://github.com
  - name: STORAGE_CLASS
    required: true
    value: "standard-rwo"
  - name: LARGE_STORAGE
    required: true
    value: "40Gi"
  - name: SMALL_STORAGE
    required: true
    value: "3Gi"
  - name: HOST
    required: true
  - name: CONF_HOST
    required: true
  - name: DB_PASSWORD
    required: true
  - name: DB_PRIMARY_PASSWORD
    required: true
  - name: DB_ROOT_PASSWORD
    required: true
  - name: FINBIF_ACCESS_TOKEN
    required: true
  - name: FINBIF_API
    required: true
  - name: FINBIF_WAREHOUSE_QUERY
    required: true
  - name: FINBIF_EMAIL
    required: true
  - name: TIMEOUT_IN_HOURS
    required: true
  - name: GITHUB_SECRET
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{20}"
metadata:
  name: ${APP}
objects:
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${VAR}-${BRANCH}
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: ${SMALL_STORAGE}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DB}-${BRANCH}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ReadWriteOnce
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: ${LARGE_STORAGE}
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${CONF}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP}-${BRANCH}:latest
    source:
      type: Git
      git:
        uri: https://github.com/luomus/${APP}.git
        ref: ${BRANCH}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${CONF}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${CONF}-${BRANCH}:latest
    source:
      type: Git
      git:
        uri: https://github.com/luomus/${APP}.git
        ref: ${BRANCH}
      contextDir: ${CONF}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      deploymentconfig: ${APP}-${BRANCH}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${APP}-${BRANCH}
      spec:
        containers:
        - image: ${APP}-${BRANCH}:latest
          name: ${APP}-${BRANCH}
          ports:
          - containerPort: ${{APP_PORT}}
          volumeMounts:
          - mountPath: ${HOME}/${VAR}
            name: ${VAR}-${BRANCH}
          - mountPath: ${HOME}/${TMP_DIR}
            name: ${TMP_DIR}
          livenessProbe:
            httpGet:
              path: /${HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              path: /${HEALTH}
              port: ${{APP_PORT}}
            initialDelaySeconds: ${{READINESS_PERIOD}}
            periodSeconds: ${{READINESS_PERIOD}}
          env:
          - name: PAGE_TITLE
            value: ${APP_TITLE}
          - name: PGUSER
            value: ${DB}
          - name: PGPASSWORD
            value: ${DB_PASSWORD}
          - name: PGHOST
            value: ${DB}
          - name: FINBIF_ACCESS_TOKEN
            value: ${FINBIF_ACCESS_TOKEN}
          - name: FINBIF_API
            value: ${FINBIF_API}
          - name: FINBIF_WAREHOUSE_QUERY
            value: ${FINBIF_WAREHOUSE_QUERY}
          - name: FINBIF_EMAIL
            value: ${FINBIF_EMAIL}
        volumes:
        - name: ${VAR}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${VAR}-${BRANCH}
        - name: ${TMP_DIR}
          emptyDir:
            medium: Memory
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APP}-${BRANCH}
        from:
          kind: ImageStreamTag
          name: ${APP}-${BRANCH}:latest
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      deploymentconfig: ${DB}-${BRANCH}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${DB}-${BRANCH}
      spec:
        containers:
        - image: ${DB_IMAGE}
          name: ${DB}-${BRANCH}
          volumeMounts:
          - mountPath: ${DB_DIR}
            name: ${DB}-${BRANCH}
          ports:
            - containerPort: ${{DB_PORT}}
          livenessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              command: ${{DB_HEALTHCHECK}}
            initialDelaySeconds: ${{READINESS_PERIOD}}
            periodSeconds: ${{READINESS_PERIOD}}
          env:
          - name: MODE
            value: ${DB}
          - name: PG_DATABASE
            value: ${DB}
          - name: PG_PRIMARY_PORT
            value: ${DB_PORT}
          - name: PG_MODE
            value: ${DB_MODE}
          - name: PG_USER
            value: ${DB}
          - name: PG_PASSWORD
            value: ${DB_PASSWORD}
          - name: PG_PRIMARY_USER
            value: ${DB_MODE}
          - name: PG_PRIMARY_PASSWORD
            value: ${DB_PRIMARY_PASSWORD}
          - name: PG_ROOT_PASSWORD
            value: ${DB_ROOT_PASSWORD}
          - name: PGDATA_PATH_OVERRIDE
            value: ${DB}
        volumes:
        - name: ${DB}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${DB}-${BRANCH}
    triggers:
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${CONF}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      deploymentconfig: ${CONF}-${BRANCH}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${CONF}-${BRANCH}
      spec:
        containers:
        - image: ${CONF}-${BRANCH}:latest
          name: ${CONF}-${BRANCH}
          ports:
          - containerPort: ${{SHINY_PORT}}
          volumeMounts:
          - mountPath: ${HOME}/${VAR}
            name: ${VAR}-${BRANCH}
          livenessProbe:
            httpGet:
              port: ${{SHINY_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              port: ${{SHINY_PORT}}
            initialDelaySeconds: ${{READINESS_PERIOD}}
            periodSeconds: ${{READINESS_PERIOD}}
        volumes:
        - name: ${VAR}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${VAR}-${BRANCH}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${CONF}-${BRANCH}
        from:
          kind: ImageStreamTag
          name: ${CONF}-${BRANCH}:latest
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}
      port: ${{APP_PORT}}
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${APP}-${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${CONF}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${SHINY_PORT}
      port: ${{SHINY_PORT}}
      targetPort: ${{SHINY_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${CONF}-${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${DB_PORT}
      port: ${{DB_PORT}}
      targetPort: ${{DB_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${DB}-${BRANCH}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    host: ${HOST}
    port:
      targetPort: ${{APP_PORT}}
    tls:
      termination: edge
    to:
      kind: Service
      name: ${APP}-${BRANCH}
    wildcardPolicy: None
- kind: Route
  apiVersion: v1
  metadata:
    name: ${CONF}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    host: ${CONF_HOST}
    port:
      targetPort: ${{SHINY_PORT}}
    tls:
      termination: edge
    to:
      kind: Service
      name: ${CONF}-${BRANCH}
    wildcardPolicy: None
- kind: CronJob
  apiVersion: batch/v1beta1
  metadata:
    name: ${APP}-${BRANCH}
  spec:
    schedule: ${JOB_SCHEDULE}
    concurrencyPolicy: ${JOB_CONCURRENCY}
    successfulJobsHistoryLimit: ${{JOB_LIMIT}}
    failedJobsHistoryLimit: ${{JOB_LIMIT}}
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              app: ${APP}
          spec:
            containers:
            - name: ${APP}-${BRANCH}
              image: ${APP}-${BRANCH}:latest
              command: ${{JOB_CMD}}
              volumeMounts:
              - mountPath: ${HOME}/${VAR}
                name: ${VAR}-${BRANCH}
              env:
              - name: FINBIF_ACCESS_TOKEN
                value: ${FINBIF_ACCESS_TOKEN}
              - name: FINBIF_API
                value: ${FINBIF_API}
              - name: FINBIF_WAREHOUSE_QUERY
                value: ${FINBIF_WAREHOUSE_QUERY}
              - name: FINBIF_EMAIL
                value: ${FINBIF_EMAIL}
              - name: PGUSER
                value: ${DB}
              - name: PGPASSWORD
                value: ${DB_PASSWORD}
              - name: PGHOST
                value: ${DB}
              - name: TIMEOUT_IN_HOURS
                value: ${TIMEOUT_IN_HOURS}
            volumes:
            - name: ${VAR}-${BRANCH}
              persistentVolumeClaim:
                claimName: ${VAR}-${BRANCH}
            restartPolicy: Never
