kind: Template
apiVersion: v1
parameters:
  - name: APP
    required: true
    value: fin-biodiv-indicators
  - name: APP_TITLE
    required: true
    value: "Finnish Biodiversity Indicators"
  - name: APP_PORT
    required: true
    value: "8000"
  - name: HOME
    required: true
    value: /home/user
  - name: HEALTH
    required: true
    value: healthz
  - name: LIVENESS_PERIOD
    required: true
    value: "1800"
  - name: FAILURE_THRESHOLD
    required: true
    value: "5"
  - name: READINESS_PERIOD
    required: true
    value: "5"
  - name: LOG
    required: true
    value: log-monitor
  - name: LOG_PORT
    required: true
    value: "3838"
  - name: LOG_DIR
    required: true
    value: logs
  - name: TMP_DIR
    required: true
    value: tmp
  - name: DB
    required: true
    value: postgres
  - name: DB_PORT
    required: true
    value: "5432"
  - name: DB_DIR
    required: true
    value: /pgdata
  - name: DB_MODE
    required: true
    value: primary
  - name: JOB_CMD
    required: true
    value: '["Rscript", "--vanilla", "update_indices.R"]'
  - name: JOB_SCHEDULE
    required: true
    value: "0 22 * * *"
  - name: JOB_LIMIT
    required: true
    value: "7"
  - name: JOB_CONCURRENCY
    required: true
    value: "Forbid"
  - name: GIT_HOST
    required: true
    value: https://github.com
  - name: ORG
    required: true
    value: luomus
  - name: PROD
    required: true
    value: main
  - name: DEV
    required: true
    value: dev
  - name: TAG
    required: true
    value: latest
  - name: STORAGE
    required: true
    value: "40Gi"
  - name: SMALL_STORAGE
    required: true
    value: "3Gi"
  - name: REPS
    required: true
    value: "1"
  - name: HOST
    required: true
  - name: SUBDOMAIN
    required: true
  - name: LOG_HOST
    required: true
  - name: LOG_SUBDOMAIN
    required: true
  - name: DEV_DB_PASSWORD
    required: true
  - name: DEV_DB_PRIMARY_PASSWORD
    required: true
  - name: DEV_DB_ROOT_PASSWORD
    required: true
  - name: DEV_FINBIF_ACCESS_TOKEN
    required: true
  - name: DEV_FINBIF_API
    required: true
  - name: DEV_FINBIF_WAREHOUSE_QUERY
    required: true
  - name: FINBIF_EMAIL
    required: true
  - name: GITHUB_SECRET
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{20}"
metadata:
  name: ${APP}
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${DEV}-${APP}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${DEV}-${APP}:${TAG}
    source:
      type: Git
      git:
        uri: ${GIT_HOST}/${ORG}/${APP}.git
        ref: ${DEV}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${DEV}-${DB}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${DEV}-${DB}:${TAG}
    source:
      type: Git
      git:
        uri: ${GIT_HOST}/${ORG}/${APP}.git
        ref: ${DEV}
      contextDir: ${DB}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${LOG}:${TAG}
    source:
      type: Git
      git:
        uri: ${GIT_HOST}/${ORG}/${LOG}.git
        ref: ${PROD}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${DEV}-${APP}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${DEV}-${DB}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${DEV}-${APP}
    labels:
      app: ${APP}
  spec:
    replicas: ${{REPS}}
    selector:
      app: ${APP}
      deploymentconfig: ${DEV}-${APP}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${DEV}-${APP}
      spec:
        containers:
        - image: ${DEV}-${APP}:${TAG}
          name: ${DEV}-${APP}
          ports:
          - containerPort: ${APP_PORT}
          volumeMounts:
          - mountPath: ${HOME}/${LOG_DIR}
            name: ${DEV}-${LOG}
          - mountPath: ${HOME}/${TMP_DIR}
            name: ${TMP_DIR}
          livenessProbe:
            httpGet:
              path: /${HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              path: /${HEALTH}
              port: ${{APP_PORT}}
            initialDelaySeconds: ${{READINESS_PERIOD}}
            periodSeconds: ${{READINESS_PERIOD}}
          env:
          - name: PAGE_TITLE
            value: ${APP_TITLE}-${DEV}
          - name: PGUSER
            value: ${DB}
          - name: PGPASSWORD
            value: ${DEV_DB_PASSWORD}
          - name: PGHOST
            value: ${DEV}-${DB}
        volumes:
        - name: ${DEV}-${LOG}
          persistentVolumeClaim:
            claimName: ${DEV}-${LOG}
        - name: ${TMP_DIR}
          emptyDir:
            medium: Memory
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${DEV}-${APP}
        from:
          kind: ImageStreamTag
          name: ${DEV}-${APP}:${TAG}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${DEV}-${DB}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      deploymentconfig: ${DEV}-${DB}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${DEV}-${DB}
      spec:
        containers:
        - image: ${DEV}-${DB}
          name: ${DEV}-${DB}
          volumeMounts:
          - mountPath: ${DB_DIR}
            name: ${DEV}-${DB}
          ports:
            - containerPort: ${DB_PORT}
          env:
          - name: MODE
            value: ${DB}
          - name: PG_DATABASE
            value: ${DB}
          - name: PG_PRIMARY_PORT
            value: ${DB_PORT}
          - name: PG_MODE
            value: ${DB_MODE}
          - name: PG_USER
            value: ${DB}
          - name: PG_PASSWORD
            value: ${DEV_DB_PASSWORD}
          - name: PG_PRIMARY_USER
            value: ${DB_MODE}
          - name: PG_PRIMARY_PASSWORD
            value: ${DEV_DB_PRIMARY_PASSWORD}
          - name: PG_ROOT_PASSWORD
            value: ${DEV_DB_ROOT_PASSWORD}
          - name: PGDATA_PATH_OVERRIDE
            value: ${DEV}-${DB}
        volumes:
        - name: ${DEV}-${DB}
          persistentVolumeClaim:
            claimName: ${DEV}-${DB}
    triggers:
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${DEV}-${LOG}
    labels:
      app: ${APP}
  spec:
    replicas: ${{REPS}}
    selector:
      app: ${APP}
      deploymentconfig: ${DEV}-${LOG}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${DEV}-${LOG}
      spec:
        containers:
        - image: ${LOG}:${TAG}
          name: ${DEV}-${LOG}
          ports:
          - containerPort: ${LOG_PORT}
          volumeMounts:
          - mountPath: ${HOME}/${LOG_DIR}
            name: ${DEV}-${LOG}
          livenessProbe:
            httpGet:
              port: ${{LOG_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              port: ${{LOG_PORT}}
            initialDelaySeconds: ${{READINESS_PERIOD}}
            periodSeconds: ${{READINESS_PERIOD}}
          env:
          - name: PAGE_TITLE
            value: ${APP_TITLE}-${DEV}
          - name: LOG_DIR
            value: ${LOG_DIR}
        volumes:
        - name: ${DEV}-${LOG}
          persistentVolumeClaim:
            claimName: ${DEV}-${LOG}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${DEV}-${LOG}
        from:
          kind: ImageStreamTag
          name: ${LOG}:${TAG}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DEV}-${LOG}
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: ${SMALL_STORAGE}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DEV}-${DB}
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: ${SMALL_STORAGE}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DEV}-${APP}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}
      port: ${APP_PORT}
      protocol: TCP
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${DEV}-${APP}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DEV}-${LOG}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${LOG_PORT}
      port: ${LOG_PORT}
      protocol: TCP
      targetPort: ${{LOG_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${DEV}-${LOG}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DEV}-${DB}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${DB_PORT}
      port: ${DB_PORT}
      targetPort: ${{DB_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${DEV}-${DB}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${DEV}-${APP}
    labels:
      app: ${APP}
  spec:
    host: ${SUBDOMAIN}-${DEV}.${HOST}
    port:
      targetPort: ${APP_PORT}
    tls:
      termination: edge
    to:
      kind: Service
      name: ${DEV}-${APP}
    wildcardPolicy: None
- kind: Route
  apiVersion: v1
  metadata:
    name: ${DEV}-${LOG}
    labels:
      app: ${APP}
  spec:
    host: ${LOG_SUBDOMAIN}-${DEV}.${LOG_HOST}
    port:
      targetPort: ${LOG_PORT}
    tls:
      termination: edge
    to:
      kind: Service
      name: ${DEV}-${LOG}
    wildcardPolicy: None
- kind: CronJob
  apiVersion: batch/v1beta1
  metadata:
    name: ${DEV}-${APP}
  spec:
    schedule: ${JOB_SCHEDULE}
    concurrencyPolicy: ${JOB_CONCURRENCY}
    successfulJobsHistoryLimit: ${{JOB_LIMIT}}
    failedJobsHistoryLimit: ${{JOB_LIMIT}}
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              app: ${APP}
          spec:
            containers:
            - name: ${DEV}-${APP}
              image: ${DEV}-${APP}:${TAG}
              command: ${{JOB_CMD}}
              env:
              - name: FINBIF_ACCESS_TOKEN
                value: ${DEV_FINBIF_ACCESS_TOKEN}
              - name: FINBIF_API
                value: ${DEV_FINBIF_API}
              - name: FINBIF_WAREHOUSE_QUERY
                value: ${DEV_FINBIF_WAREHOUSE_QUERY}
              - name: FINBIF_EMAIL
                value: ${FINBIF_EMAIL}
              - name: PGUSER
                value: ${DB}
              - name: PGPASSWORD
                value: ${DEV_DB_PASSWORD}
              - name: PGHOST
                value: ${DEV}-${DB}
            restartPolicy: Never
