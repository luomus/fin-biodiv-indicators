# Deploy: oc process -f openshift-template.yml --param-file=.env | oc create -f -
kind: Template
apiVersion: v1
parameters:
  - name: APP
    required: true
    value: fin-biodiv-indicators
  - name: APP_TITLE
    required: true
    value: "Finnish Biodiversity Indicators"
  - name: APP_PORT
    required: true
    value: "8000"
  - name: HOME
    required: true
    value: /home/user
  - name: HEALTH
    required: true
    value: healthz
  - name: LIVENESS_PERIOD
    required: true
    value: "1800"
  - name: FAILURE_THRESHOLD
    required: true
    value: "5"
  - name: READINESS_PERIOD
    required: true
    value: "5"
  - name: LOG
    required: true
    value: log-monitor
  - name: LOG_DIR
    required: true
    value: logs
  - name: TMP_DIR
    required: true
    value: tmp
  - name: VAR
    required: true
    value: var
  - name: SHINY_PORT
    required: true
    value: "3838"
  - name: DB
    required: true
    value: postgres
  - name: DB_PORT
    required: true
    value: "5432"
  - name: DB_DIR
    required: true
    value: /pgdata
  - name: DB_MODE
    required: true
    value: primary
  - name: CONF
    required: true
    value: config
  - name: JOB_CMD
    required: true
    value: '["Rscript", "--vanilla", "update_indices.R"]'
  - name: JOB_SCHEDULE
    required: true
    value: "0 22 * * *"
  - name: JOB_LIMIT
    required: true
    value: "7"
  - name: JOB_CONCURRENCY
    required: true
    value: "Forbid"
  - name: GIT_HOST
    required: true
    value: https://github.com
  - name: ORG
    required: true
    value: luomus
  - name: PROD
    required: true
    value: main
  - name: TAG
    required: true
    value: latest
  - name: STORAGE
    required: true
    value: "40Gi"
  - name: SMALL_STORAGE
    required: true
    value: "3Gi"
  - name: REPS
    required: true
    value: "1"
  - name: HOST
    required: true
  - name: SUBDOMAIN
    required: true
  - name: CONF_HOST
    required: true
  - name: CONF_SUBDOMAIN
    required: true
  - name: LOG_HOST
    required: true
  - name: LOG_SUBDOMAIN
    required: true
  - name: DB_PASSWORD
    required: true
  - name: DB_PRIMARY_PASSWORD
    required: true
  - name: DB_ROOT_PASSWORD
    required: true
  - name: FINBIF_ACCESS_TOKEN
    required: true
  - name: FINBIF_API
    required: true
  - name: FINBIF_WAREHOUSE_QUERY
    required: true
  - name: FINBIF_EMAIL
    required: true
  - name: GITHUB_SECRET
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{20}"
metadata:
  name: ${APP}
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APP}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP}:${TAG}
    source:
      type: Git
      git:
        uri: ${GIT_HOST}/${ORG}/${APP}.git
        ref: ${PROD}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${DB}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${DB}:${TAG}
    source:
      type: Git
      git:
        uri: ${GIT_HOST}/${ORG}/${APP}.git
        ref: ${PROD}
      contextDir: ${DB}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${CONF}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${CONF}:${TAG}
    source:
      type: Git
      git:
        uri: ${GIT_HOST}/${ORG}/${APP}.git
        ref: ${PROD}
      contextDir: ${CONF}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${LOG}:${TAG}
    source:
      type: Git
      git:
        uri: ${GIT_HOST}/${ORG}/${LOG}.git
        ref: ${PROD}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${APP}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${DB}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${CONF}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${APP}
    labels:
      app: ${APP}
  spec:
    replicas: ${{REPS}}
    selector:
      app: ${APP}
      deploymentconfig: ${APP}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${APP}
      spec:
        containers:
        - image: ${APP}:${TAG}
          name: ${APP}
          ports:
          - containerPort: ${APP_PORT}
          volumeMounts:
          - mountPath: ${HOME}/${LOG_DIR}
            name: ${LOG}
          - mountPath: ${HOME}/${TMP_DIR}
            name: ${TMP_DIR}
          livenessProbe:
            httpGet:
              path: /${HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              path: /${HEALTH}
              port: ${{APP_PORT}}
            initialDelaySeconds: ${{READINESS_PERIOD}}
            periodSeconds: ${{READINESS_PERIOD}}
          env:
          - name: PAGE_TITLE
            value: ${APP_TITLE}
          - name: PGUSER
            value: ${DB}
          - name: PGPASSWORD
            value: ${DB_PASSWORD}
          - name: PGHOST
            value: ${DB}
          - name: FINBIF_ACCESS_TOKEN
            value: ${FINBIF_ACCESS_TOKEN}
          - name: FINBIF_API
            value: ${FINBIF_API}
          - name: FINBIF_WAREHOUSE_QUERY
            value: ${FINBIF_WAREHOUSE_QUERY}
          - name: FINBIF_EMAIL
            value: ${FINBIF_EMAIL}
        volumes:
        - name: ${LOG}
          persistentVolumeClaim:
            claimName: ${LOG}
        - name: ${TMP_DIR}
          emptyDir:
            medium: Memory
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APP}
        from:
          kind: ImageStreamTag
          name: ${APP}:${TAG}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${DB}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      deploymentconfig: ${DB}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${DB}
      spec:
        containers:
        - image: ${DB}
          name: ${DB}
          volumeMounts:
          - mountPath: ${DB_DIR}
            name: ${DB}
          ports:
            - containerPort: ${DB_PORT}
          env:
          - name: MODE
            value: ${DB}
          - name: PG_DATABASE
            value: ${DB}
          - name: PG_PRIMARY_PORT
            value: ${DB_PORT}
          - name: PG_MODE
            value: ${DB_MODE}
          - name: PG_USER
            value: ${DB}
          - name: PG_PASSWORD
            value: ${DB_PASSWORD}
          - name: PG_PRIMARY_USER
            value: ${DB_MODE}
          - name: PG_PRIMARY_PASSWORD
            value: ${DB_PRIMARY_PASSWORD}
          - name: PG_ROOT_PASSWORD
            value: ${DB_ROOT_PASSWORD}
          - name: PGDATA_PATH_OVERRIDE
            value: ${DB}
        volumes:
        - name: ${DB}
          persistentVolumeClaim:
            claimName: ${DB}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${DB}
        from:
          kind: ImageStreamTag
          name: ${DB}:${TAG}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${CONF}
    labels:
      app: ${APP}
  spec:
    replicas: ${{REPS}}
    selector:
      app: ${APP}
      deploymentconfig: ${CONF}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${CONF}
      spec:
        containers:
        - image: ${CONF}:${TAG}
          name: ${CONF}
          ports:
          - containerPort: ${SHINY_PORT}
          volumeMounts:
          - mountPath: ${HOME}/${VAR}
            name: ${VAR}
          livenessProbe:
            httpGet:
              port: ${{SHINY_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              port: ${{SHINY_PORT}}
            initialDelaySeconds: ${{READINESS_PERIOD}}
            periodSeconds: ${{READINESS_PERIOD}}
        volumes:
        - name: ${VAR}
          persistentVolumeClaim:
            claimName: ${VAR}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${CONF}
        from:
          kind: ImageStreamTag
          name: ${CONF}:${TAG}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    replicas: ${{REPS}}
    selector:
      app: ${APP}
      deploymentconfig: ${LOG}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${LOG}
      spec:
        containers:
        - image: ${LOG}:${TAG}
          name: ${LOG}
          ports:
          - containerPort: ${SHINY_PORT}
          volumeMounts:
          - mountPath: ${HOME}/${LOG_DIR}
            name: ${LOG}
          livenessProbe:
            httpGet:
              port: ${{SHINY_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              port: ${{SHINY_PORT}}
            initialDelaySeconds: ${{READINESS_PERIOD}}
            periodSeconds: ${{READINESS_PERIOD}}
          env:
          - name: PAGE_TITLE
            value: ${APP_TITLE}
          - name: LOG_DIR
            value: ${HOME}/${VAR}/${LOG_DIR}
        volumes:
        - name: ${LOG}
          persistentVolumeClaim:
            claimName: ${LOG}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${LOG}
        from:
          kind: ImageStreamTag
          name: ${LOG}:${TAG}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${VAR}
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: ${SMALL_STORAGE}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DB}
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: ${STORAGE}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}
      port: ${APP_PORT}
      protocol: TCP
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${APP}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${SHINY_PORT}
      port: ${SHINY_PORT}
      protocol: TCP
      targetPort: ${{SHINY_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${LOG}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${CONF}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${SHINY_PORT}
      port: ${SHINY_PORT}
      protocol: TCP
      targetPort: ${{SHINY_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${CONF}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DB}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${DB_PORT}
      port: ${DB_PORT}
      targetPort: ${{DB_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${DB}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APP}
    labels:
      app: ${APP}
  spec:
    host: ${SUBDOMAIN}.${HOST}
    port:
      targetPort: ${APP_PORT}
    tls:
      termination: edge
    to:
      kind: Service
      name: ${APP}
    wildcardPolicy: None
- kind: Route
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    host: ${LOG_SUBDOMAIN}.${LOG_HOST}
    port:
      targetPort: ${SHINY_PORT}
    tls:
      termination: edge
    to:
      kind: Service
      name: ${LOG}
    wildcardPolicy: None
- kind: Route
  apiVersion: v1
  metadata:
    name: ${CONF}
    labels:
      app: ${APP}
  spec:
    host: ${CONF_SUBDOMAIN}.${CONF_HOST}
    port:
      targetPort: ${SHINY_PORT}
    tls:
      termination: edge
    to:
      kind: Service
      name: ${CONF}
    wildcardPolicy: None
- kind: CronJob
  apiVersion: batch/v1beta1
  metadata:
    name: ${APP}
  spec:
    schedule: ${JOB_SCHEDULE}
    concurrencyPolicy: ${JOB_CONCURRENCY}
    successfulJobsHistoryLimit: ${{JOB_LIMIT}}
    failedJobsHistoryLimit: ${{JOB_LIMIT}}
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              app: ${APP}
          spec:
            containers:
            - name: ${APP}
              image: ${APP}:${TAG}
              command: ${{JOB_CMD}}
              volumeMounts:
              - mountPath: ${HOME}/${VAR}
                name: ${VAR}
              env:
              - name: FINBIF_ACCESS_TOKEN
                value: ${FINBIF_ACCESS_TOKEN}
              - name: FINBIF_API
                value: ${FINBIF_API}
              - name: FINBIF_WAREHOUSE_QUERY
                value: ${FINBIF_WAREHOUSE_QUERY}
              - name: FINBIF_EMAIL
                value: ${FINBIF_EMAIL}
              - name: PGUSER
                value: ${DB}
              - name: PGPASSWORD
                value: ${DB_PASSWORD}
              - name: PGHOST
                value: ${DB}
            volumes:
            - name: ${VAR}
              persistentVolumeClaim:
                claimName: ${VAR}
            restartPolicy: Never
